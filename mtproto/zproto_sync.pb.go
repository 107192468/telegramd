// Code generated by protoc-gen-go. DO NOT EDIT.
// source: zproto_sync.proto

package mtproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 同步类型
type SyncType int32

const (
	SyncType_SYNC_TYPE_UNKNOWN            SyncType = 0
	SyncType_SYNC_TYPE_USER               SyncType = 1
	SyncType_SYNC_TYPE_USER_NOTME         SyncType = 2
	SyncType_SYNC_TYPE_AUTH_KEY           SyncType = 3
	SyncType_SYNC_TYPE_AUTH_KEY_USER      SyncType = 4
	SyncType_SYNC_TYPE_AUTH_KEY_USERNOTME SyncType = 5
)

var SyncType_name = map[int32]string{
	0: "SYNC_TYPE_UNKNOWN",
	1: "SYNC_TYPE_USER",
	2: "SYNC_TYPE_USER_NOTME",
	3: "SYNC_TYPE_AUTH_KEY",
	4: "SYNC_TYPE_AUTH_KEY_USER",
	5: "SYNC_TYPE_AUTH_KEY_USERNOTME",
}
var SyncType_value = map[string]int32{
	"SYNC_TYPE_UNKNOWN":            0,
	"SYNC_TYPE_USER":               1,
	"SYNC_TYPE_USER_NOTME":         2,
	"SYNC_TYPE_AUTH_KEY":           3,
	"SYNC_TYPE_AUTH_KEY_USER":      4,
	"SYNC_TYPE_AUTH_KEY_USERNOTME": 5,
}

func (x SyncType) String() string {
	return proto.EnumName(SyncType_name, int32(x))
}
func (SyncType) EnumDescriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

type MessageDataEmpty struct {
}

func (m *MessageDataEmpty) Reset()                    { *m = MessageDataEmpty{} }
func (m *MessageDataEmpty) String() string            { return proto.CompactTextString(m) }
func (*MessageDataEmpty) ProtoMessage()               {}
func (*MessageDataEmpty) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

type MessageData struct {
	MessageType int32 `protobuf:"varint,1,opt,name=message_type,json=messageType" json:"message_type,omitempty"`
}

func (m *MessageData) Reset()                    { *m = MessageData{} }
func (m *MessageData) String() string            { return proto.CompactTextString(m) }
func (*MessageData) ProtoMessage()               {}
func (*MessageData) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

func (m *MessageData) GetMessageType() int32 {
	if m != nil {
		return m.MessageType
	}
	return 0
}

type VoidRsp struct {
}

func (m *VoidRsp) Reset()                    { *m = VoidRsp{} }
func (m *VoidRsp) String() string            { return proto.CompactTextString(m) }
func (*VoidRsp) ProtoMessage()               {}
func (*VoidRsp) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{2} }

type PushClientID struct {
	AuthKeyId       int64 `protobuf:"varint,1,opt,name=auth_key_id,json=authKeyId" json:"auth_key_id,omitempty"`
	SessionId       int64 `protobuf:"varint,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	NetlibSessionId int64 `protobuf:"varint,3,opt,name=netlib_session_id,json=netlibSessionId" json:"netlib_session_id,omitempty"`
}

func (m *PushClientID) Reset()                    { *m = PushClientID{} }
func (m *PushClientID) String() string            { return proto.CompactTextString(m) }
func (*PushClientID) ProtoMessage()               {}
func (*PushClientID) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{3} }

func (m *PushClientID) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *PushClientID) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *PushClientID) GetNetlibSessionId() int64 {
	if m != nil {
		return m.NetlibSessionId
	}
	return 0
}

// PushMessage state
type ClientUpdatesState struct {
	Pts      int32 `protobuf:"varint,1,opt,name=pts" json:"pts,omitempty"`
	PtsCount int32 `protobuf:"varint,2,opt,name=pts_count,json=ptsCount" json:"pts_count,omitempty"`
	Qts      int32 `protobuf:"varint,3,opt,name=qts" json:"qts,omitempty"`
	QtsCount int32 `protobuf:"varint,4,opt,name=qts_count,json=qtsCount" json:"qts_count,omitempty"`
	Seq      int32 `protobuf:"varint,5,opt,name=seq" json:"seq,omitempty"`
	SeqStart int32 `protobuf:"varint,6,opt,name=seq_start,json=seqStart" json:"seq_start,omitempty"`
	Date     int32 `protobuf:"varint,7,opt,name=date" json:"date,omitempty"`
}

func (m *ClientUpdatesState) Reset()                    { *m = ClientUpdatesState{} }
func (m *ClientUpdatesState) String() string            { return proto.CompactTextString(m) }
func (*ClientUpdatesState) ProtoMessage()               {}
func (*ClientUpdatesState) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{4} }

func (m *ClientUpdatesState) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ClientUpdatesState) GetPtsCount() int32 {
	if m != nil {
		return m.PtsCount
	}
	return 0
}

func (m *ClientUpdatesState) GetQts() int32 {
	if m != nil {
		return m.Qts
	}
	return 0
}

func (m *ClientUpdatesState) GetQtsCount() int32 {
	if m != nil {
		return m.QtsCount
	}
	return 0
}

func (m *ClientUpdatesState) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ClientUpdatesState) GetSeqStart() int32 {
	if m != nil {
		return m.SeqStart
	}
	return 0
}

func (m *ClientUpdatesState) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////
// SERVER_AUTH_REQ
type ConnectToSessionServerReq struct {
}

func (m *ConnectToSessionServerReq) Reset()                    { *m = ConnectToSessionServerReq{} }
func (m *ConnectToSessionServerReq) String() string            { return proto.CompactTextString(m) }
func (*ConnectToSessionServerReq) ProtoMessage()               {}
func (*ConnectToSessionServerReq) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{5} }

type SessionServerConnectedRsp struct {
	ServerId   int32  `protobuf:"varint,1,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	ServerName string `protobuf:"bytes,2,opt,name=server_name,json=serverName" json:"server_name,omitempty"`
}

func (m *SessionServerConnectedRsp) Reset()                    { *m = SessionServerConnectedRsp{} }
func (m *SessionServerConnectedRsp) String() string            { return proto.CompactTextString(m) }
func (*SessionServerConnectedRsp) ProtoMessage()               {}
func (*SessionServerConnectedRsp) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{6} }

func (m *SessionServerConnectedRsp) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *SessionServerConnectedRsp) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

// PushUpdatesData --> VoidRsp
type PushUpdatesData struct {
	ClientId      *PushClientID       `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	State         *ClientUpdatesState `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	RawDataHeader uint32              `protobuf:"varint,3,opt,name=raw_data_header,json=rawDataHeader" json:"raw_data_header,omitempty"`
	RawData       []byte              `protobuf:"bytes,4,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
}

func (m *PushUpdatesData) Reset()                    { *m = PushUpdatesData{} }
func (m *PushUpdatesData) String() string            { return proto.CompactTextString(m) }
func (*PushUpdatesData) ProtoMessage()               {}
func (*PushUpdatesData) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{7} }

func (m *PushUpdatesData) GetClientId() *PushClientID {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func (m *PushUpdatesData) GetState() *ClientUpdatesState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *PushUpdatesData) GetRawDataHeader() uint32 {
	if m != nil {
		return m.RawDataHeader
	}
	return 0
}

func (m *PushUpdatesData) GetRawData() []byte {
	if m != nil {
		return m.RawData
	}
	return nil
}

type SyncShortMessageRequest struct {
	ClientId     *PushClientID `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	PushType     SyncType      `protobuf:"varint,2,opt,name=push_type,json=pushType,enum=mtproto.SyncType" json:"push_type,omitempty"`
	PushtoUserId int32         `protobuf:"varint,3,opt,name=pushto_user_id,json=pushtoUserId" json:"pushto_user_id,omitempty"`
	// int32 peer_type = 4;
	PeerId   int32                 `protobuf:"varint,4,opt,name=peer_id,json=peerId" json:"peer_id,omitempty"`
	PushData *TLUpdateShortMessage `protobuf:"bytes,5,opt,name=push_data,json=pushData" json:"push_data,omitempty"`
}

func (m *SyncShortMessageRequest) Reset()                    { *m = SyncShortMessageRequest{} }
func (m *SyncShortMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*SyncShortMessageRequest) ProtoMessage()               {}
func (*SyncShortMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{8} }

func (m *SyncShortMessageRequest) GetClientId() *PushClientID {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func (m *SyncShortMessageRequest) GetPushType() SyncType {
	if m != nil {
		return m.PushType
	}
	return SyncType_SYNC_TYPE_UNKNOWN
}

func (m *SyncShortMessageRequest) GetPushtoUserId() int32 {
	if m != nil {
		return m.PushtoUserId
	}
	return 0
}

func (m *SyncShortMessageRequest) GetPeerId() int32 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *SyncShortMessageRequest) GetPushData() *TLUpdateShortMessage {
	if m != nil {
		return m.PushData
	}
	return nil
}

// UpdateShortMessageRequest --> DeliveryRsp
type UpdateShortMessageRequest struct {
	PushType     SyncType `protobuf:"varint,1,opt,name=push_type,json=pushType,enum=mtproto.SyncType" json:"push_type,omitempty"`
	PushtoUserId int32    `protobuf:"varint,2,opt,name=pushto_user_id,json=pushtoUserId" json:"pushto_user_id,omitempty"`
	// int32 peer_type = 4;
	PeerId   int32                 `protobuf:"varint,3,opt,name=peer_id,json=peerId" json:"peer_id,omitempty"`
	PushData *TLUpdateShortMessage `protobuf:"bytes,4,opt,name=push_data,json=pushData" json:"push_data,omitempty"`
}

func (m *UpdateShortMessageRequest) Reset()                    { *m = UpdateShortMessageRequest{} }
func (m *UpdateShortMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateShortMessageRequest) ProtoMessage()               {}
func (*UpdateShortMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{9} }

func (m *UpdateShortMessageRequest) GetPushType() SyncType {
	if m != nil {
		return m.PushType
	}
	return SyncType_SYNC_TYPE_UNKNOWN
}

func (m *UpdateShortMessageRequest) GetPushtoUserId() int32 {
	if m != nil {
		return m.PushtoUserId
	}
	return 0
}

func (m *UpdateShortMessageRequest) GetPeerId() int32 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *UpdateShortMessageRequest) GetPushData() *TLUpdateShortMessage {
	if m != nil {
		return m.PushData
	}
	return nil
}

// UpdatShortChatMessageRequest --> DeliveryRsp
type SyncShortChatMessageRequest struct {
	ClientId     *PushClientID             `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	PushType     SyncType                  `protobuf:"varint,2,opt,name=push_type,json=pushType,enum=mtproto.SyncType" json:"push_type,omitempty"`
	PushtoUserId int32                     `protobuf:"varint,3,opt,name=pushto_user_id,json=pushtoUserId" json:"pushto_user_id,omitempty"`
	PeerChatId   int32                     `protobuf:"varint,4,opt,name=peer_chat_id,json=peerChatId" json:"peer_chat_id,omitempty"`
	PushData     *TLUpdateShortChatMessage `protobuf:"bytes,5,opt,name=push_data,json=pushData" json:"push_data,omitempty"`
}

func (m *SyncShortChatMessageRequest) Reset()                    { *m = SyncShortChatMessageRequest{} }
func (m *SyncShortChatMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*SyncShortChatMessageRequest) ProtoMessage()               {}
func (*SyncShortChatMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{10} }

func (m *SyncShortChatMessageRequest) GetClientId() *PushClientID {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func (m *SyncShortChatMessageRequest) GetPushType() SyncType {
	if m != nil {
		return m.PushType
	}
	return SyncType_SYNC_TYPE_UNKNOWN
}

func (m *SyncShortChatMessageRequest) GetPushtoUserId() int32 {
	if m != nil {
		return m.PushtoUserId
	}
	return 0
}

func (m *SyncShortChatMessageRequest) GetPeerChatId() int32 {
	if m != nil {
		return m.PeerChatId
	}
	return 0
}

func (m *SyncShortChatMessageRequest) GetPushData() *TLUpdateShortChatMessage {
	if m != nil {
		return m.PushData
	}
	return nil
}

type UpdateShortChatMessageRequest struct {
	PushType     SyncType                  `protobuf:"varint,1,opt,name=push_type,json=pushType,enum=mtproto.SyncType" json:"push_type,omitempty"`
	PushtoUserId int32                     `protobuf:"varint,2,opt,name=pushto_user_id,json=pushtoUserId" json:"pushto_user_id,omitempty"`
	PeerChatId   int32                     `protobuf:"varint,3,opt,name=peer_chat_id,json=peerChatId" json:"peer_chat_id,omitempty"`
	PushData     *TLUpdateShortChatMessage `protobuf:"bytes,4,opt,name=push_data,json=pushData" json:"push_data,omitempty"`
}

func (m *UpdateShortChatMessageRequest) Reset()                    { *m = UpdateShortChatMessageRequest{} }
func (m *UpdateShortChatMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateShortChatMessageRequest) ProtoMessage()               {}
func (*UpdateShortChatMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{11} }

func (m *UpdateShortChatMessageRequest) GetPushType() SyncType {
	if m != nil {
		return m.PushType
	}
	return SyncType_SYNC_TYPE_UNKNOWN
}

func (m *UpdateShortChatMessageRequest) GetPushtoUserId() int32 {
	if m != nil {
		return m.PushtoUserId
	}
	return 0
}

func (m *UpdateShortChatMessageRequest) GetPeerChatId() int32 {
	if m != nil {
		return m.PeerChatId
	}
	return 0
}

func (m *UpdateShortChatMessageRequest) GetPushData() *TLUpdateShortChatMessage {
	if m != nil {
		return m.PushData
	}
	return nil
}

// UpdatShortChatMessageRequest --> DeliveryRsp
type SyncUpdateRequest struct {
	ClientId     *PushClientID `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	PushType     SyncType      `protobuf:"varint,2,opt,name=push_type,json=pushType,enum=mtproto.SyncType" json:"push_type,omitempty"`
	PushtoUserId int32         `protobuf:"varint,3,opt,name=pushto_user_id,json=pushtoUserId" json:"pushto_user_id,omitempty"`
	PeerType     int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType" json:"peer_type,omitempty"`
	PeerId       int32         `protobuf:"varint,5,opt,name=peer_id,json=peerId" json:"peer_id,omitempty"`
	PushData     *Update       `protobuf:"bytes,6,opt,name=push_data,json=pushData" json:"push_data,omitempty"`
}

func (m *SyncUpdateRequest) Reset()                    { *m = SyncUpdateRequest{} }
func (m *SyncUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*SyncUpdateRequest) ProtoMessage()               {}
func (*SyncUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{12} }

func (m *SyncUpdateRequest) GetClientId() *PushClientID {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func (m *SyncUpdateRequest) GetPushType() SyncType {
	if m != nil {
		return m.PushType
	}
	return SyncType_SYNC_TYPE_UNKNOWN
}

func (m *SyncUpdateRequest) GetPushtoUserId() int32 {
	if m != nil {
		return m.PushtoUserId
	}
	return 0
}

func (m *SyncUpdateRequest) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *SyncUpdateRequest) GetPeerId() int32 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *SyncUpdateRequest) GetPushData() *Update {
	if m != nil {
		return m.PushData
	}
	return nil
}

type PushUpdateRequest struct {
	PushType     SyncType `protobuf:"varint,1,opt,name=push_type,json=pushType,enum=mtproto.SyncType" json:"push_type,omitempty"`
	PushtoUserId int32    `protobuf:"varint,2,opt,name=pushto_user_id,json=pushtoUserId" json:"pushto_user_id,omitempty"`
	PeerType     int32    `protobuf:"varint,3,opt,name=peer_type,json=peerType" json:"peer_type,omitempty"`
	PeerId       int32    `protobuf:"varint,4,opt,name=peer_id,json=peerId" json:"peer_id,omitempty"`
	PushData     *Update  `protobuf:"bytes,5,opt,name=push_data,json=pushData" json:"push_data,omitempty"`
}

func (m *PushUpdateRequest) Reset()                    { *m = PushUpdateRequest{} }
func (m *PushUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*PushUpdateRequest) ProtoMessage()               {}
func (*PushUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{13} }

func (m *PushUpdateRequest) GetPushType() SyncType {
	if m != nil {
		return m.PushType
	}
	return SyncType_SYNC_TYPE_UNKNOWN
}

func (m *PushUpdateRequest) GetPushtoUserId() int32 {
	if m != nil {
		return m.PushtoUserId
	}
	return 0
}

func (m *PushUpdateRequest) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *PushUpdateRequest) GetPeerId() int32 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *PushUpdateRequest) GetPushData() *Update {
	if m != nil {
		return m.PushData
	}
	return nil
}

func init() {
	proto.RegisterType((*MessageDataEmpty)(nil), "mtproto.MessageDataEmpty")
	proto.RegisterType((*MessageData)(nil), "mtproto.MessageData")
	proto.RegisterType((*VoidRsp)(nil), "mtproto.VoidRsp")
	proto.RegisterType((*PushClientID)(nil), "mtproto.PushClientID")
	proto.RegisterType((*ClientUpdatesState)(nil), "mtproto.ClientUpdatesState")
	proto.RegisterType((*ConnectToSessionServerReq)(nil), "mtproto.ConnectToSessionServerReq")
	proto.RegisterType((*SessionServerConnectedRsp)(nil), "mtproto.SessionServerConnectedRsp")
	proto.RegisterType((*PushUpdatesData)(nil), "mtproto.PushUpdatesData")
	proto.RegisterType((*SyncShortMessageRequest)(nil), "mtproto.SyncShortMessageRequest")
	proto.RegisterType((*UpdateShortMessageRequest)(nil), "mtproto.UpdateShortMessageRequest")
	proto.RegisterType((*SyncShortChatMessageRequest)(nil), "mtproto.SyncShortChatMessageRequest")
	proto.RegisterType((*UpdateShortChatMessageRequest)(nil), "mtproto.UpdateShortChatMessageRequest")
	proto.RegisterType((*SyncUpdateRequest)(nil), "mtproto.SyncUpdateRequest")
	proto.RegisterType((*PushUpdateRequest)(nil), "mtproto.PushUpdateRequest")
	proto.RegisterEnum("mtproto.SyncType", SyncType_name, SyncType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RPCSync service

type RPCSyncClient interface {
	SyncUpdateShortMessage(ctx context.Context, in *SyncShortMessageRequest, opts ...grpc.CallOption) (*ClientUpdatesState, error)
	PushUpdateShortMessage(ctx context.Context, in *UpdateShortMessageRequest, opts ...grpc.CallOption) (*VoidRsp, error)
	SyncUpdateShortChatMessage(ctx context.Context, in *SyncShortChatMessageRequest, opts ...grpc.CallOption) (*ClientUpdatesState, error)
	PushUpdateShortChatMessage(ctx context.Context, in *UpdateShortChatMessageRequest, opts ...grpc.CallOption) (*VoidRsp, error)
	SyncUpdateData(ctx context.Context, in *SyncUpdateRequest, opts ...grpc.CallOption) (*ClientUpdatesState, error)
	PushUpdateData(ctx context.Context, in *PushUpdateRequest, opts ...grpc.CallOption) (*VoidRsp, error)
}

type rPCSyncClient struct {
	cc *grpc.ClientConn
}

func NewRPCSyncClient(cc *grpc.ClientConn) RPCSyncClient {
	return &rPCSyncClient{cc}
}

func (c *rPCSyncClient) SyncUpdateShortMessage(ctx context.Context, in *SyncShortMessageRequest, opts ...grpc.CallOption) (*ClientUpdatesState, error) {
	out := new(ClientUpdatesState)
	err := grpc.Invoke(ctx, "/mtproto.RPCSync/SyncUpdateShortMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSyncClient) PushUpdateShortMessage(ctx context.Context, in *UpdateShortMessageRequest, opts ...grpc.CallOption) (*VoidRsp, error) {
	out := new(VoidRsp)
	err := grpc.Invoke(ctx, "/mtproto.RPCSync/PushUpdateShortMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSyncClient) SyncUpdateShortChatMessage(ctx context.Context, in *SyncShortChatMessageRequest, opts ...grpc.CallOption) (*ClientUpdatesState, error) {
	out := new(ClientUpdatesState)
	err := grpc.Invoke(ctx, "/mtproto.RPCSync/SyncUpdateShortChatMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSyncClient) PushUpdateShortChatMessage(ctx context.Context, in *UpdateShortChatMessageRequest, opts ...grpc.CallOption) (*VoidRsp, error) {
	out := new(VoidRsp)
	err := grpc.Invoke(ctx, "/mtproto.RPCSync/PushUpdateShortChatMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSyncClient) SyncUpdateData(ctx context.Context, in *SyncUpdateRequest, opts ...grpc.CallOption) (*ClientUpdatesState, error) {
	out := new(ClientUpdatesState)
	err := grpc.Invoke(ctx, "/mtproto.RPCSync/SyncUpdateData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSyncClient) PushUpdateData(ctx context.Context, in *PushUpdateRequest, opts ...grpc.CallOption) (*VoidRsp, error) {
	out := new(VoidRsp)
	err := grpc.Invoke(ctx, "/mtproto.RPCSync/PushUpdateData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPCSync service

type RPCSyncServer interface {
	SyncUpdateShortMessage(context.Context, *SyncShortMessageRequest) (*ClientUpdatesState, error)
	PushUpdateShortMessage(context.Context, *UpdateShortMessageRequest) (*VoidRsp, error)
	SyncUpdateShortChatMessage(context.Context, *SyncShortChatMessageRequest) (*ClientUpdatesState, error)
	PushUpdateShortChatMessage(context.Context, *UpdateShortChatMessageRequest) (*VoidRsp, error)
	SyncUpdateData(context.Context, *SyncUpdateRequest) (*ClientUpdatesState, error)
	PushUpdateData(context.Context, *PushUpdateRequest) (*VoidRsp, error)
}

func RegisterRPCSyncServer(s *grpc.Server, srv RPCSyncServer) {
	s.RegisterService(&_RPCSync_serviceDesc, srv)
}

func _RPCSync_SyncUpdateShortMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncShortMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSyncServer).SyncUpdateShortMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCSync/SyncUpdateShortMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSyncServer).SyncUpdateShortMessage(ctx, req.(*SyncShortMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSync_PushUpdateShortMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShortMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSyncServer).PushUpdateShortMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCSync/PushUpdateShortMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSyncServer).PushUpdateShortMessage(ctx, req.(*UpdateShortMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSync_SyncUpdateShortChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncShortChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSyncServer).SyncUpdateShortChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCSync/SyncUpdateShortChatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSyncServer).SyncUpdateShortChatMessage(ctx, req.(*SyncShortChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSync_PushUpdateShortChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShortChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSyncServer).PushUpdateShortChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCSync/PushUpdateShortChatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSyncServer).PushUpdateShortChatMessage(ctx, req.(*UpdateShortChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSync_SyncUpdateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSyncServer).SyncUpdateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCSync/SyncUpdateData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSyncServer).SyncUpdateData(ctx, req.(*SyncUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSync_PushUpdateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSyncServer).PushUpdateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCSync/PushUpdateData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSyncServer).PushUpdateData(ctx, req.(*PushUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCSync",
	HandlerType: (*RPCSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncUpdateShortMessage",
			Handler:    _RPCSync_SyncUpdateShortMessage_Handler,
		},
		{
			MethodName: "PushUpdateShortMessage",
			Handler:    _RPCSync_PushUpdateShortMessage_Handler,
		},
		{
			MethodName: "SyncUpdateShortChatMessage",
			Handler:    _RPCSync_SyncUpdateShortChatMessage_Handler,
		},
		{
			MethodName: "PushUpdateShortChatMessage",
			Handler:    _RPCSync_PushUpdateShortChatMessage_Handler,
		},
		{
			MethodName: "SyncUpdateData",
			Handler:    _RPCSync_SyncUpdateData_Handler,
		},
		{
			MethodName: "PushUpdateData",
			Handler:    _RPCSync_PushUpdateData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zproto_sync.proto",
}

func init() { proto.RegisterFile("zproto_sync.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 924 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x4f, 0x8f, 0x22, 0x45,
	0x14, 0xb7, 0x81, 0x1e, 0xe0, 0xc1, 0x32, 0x50, 0xee, 0xce, 0x30, 0xe0, 0xae, 0x63, 0x67, 0xdd,
	0x98, 0x8d, 0x21, 0x8a, 0x47, 0x13, 0x8d, 0xcb, 0x92, 0x0c, 0x19, 0x97, 0x25, 0x0d, 0xec, 0x66,
	0xbc, 0x54, 0x6a, 0xe8, 0x8a, 0x10, 0xa1, 0xff, 0x50, 0x85, 0x1b, 0xbc, 0x79, 0xf5, 0x83, 0xf8,
	0x0d, 0x3c, 0xf9, 0x01, 0x3c, 0x79, 0xf7, 0x93, 0x98, 0x78, 0x33, 0xaf, 0xaa, 0xa1, 0xbb, 0x69,
	0xc0, 0x38, 0xc9, 0x26, 0x7b, 0xa2, 0xfa, 0xf7, 0x7e, 0xbc, 0xf7, 0xfb, 0xbd, 0xf7, 0x28, 0x1a,
	0x6a, 0x3f, 0xf9, 0x4b, 0x4f, 0x7a, 0x54, 0xac, 0xdd, 0x49, 0x4b, 0x1d, 0x49, 0x7e, 0x21, 0xd5,
	0xa1, 0x71, 0x5f, 0x4c, 0xa6, 0x7c, 0xc1, 0x5a, 0x72, 0xde, 0x8a, 0xc2, 0x16, 0x81, 0xea, 0x0b,
	0x2e, 0x04, 0xfb, 0x9e, 0x3f, 0x67, 0x92, 0x75, 0x17, 0xbe, 0x5c, 0x5b, 0x9f, 0x41, 0x29, 0x86,
	0x91, 0x8f, 0xa0, 0xbc, 0xd0, 0x8f, 0x54, 0xae, 0x7d, 0x5e, 0x37, 0x2e, 0x8d, 0x4f, 0x4c, 0xbb,
	0x14, 0x62, 0xa3, 0xb5, 0xcf, 0xad, 0x22, 0xe4, 0x5f, 0x79, 0x33, 0xc7, 0x16, 0xbe, 0xb5, 0x86,
	0xf2, 0x60, 0x25, 0xa6, 0x9d, 0xf9, 0x8c, 0xbb, 0xb2, 0xf7, 0x9c, 0x3c, 0x82, 0x12, 0x5b, 0xc9,
	0x29, 0xfd, 0x81, 0xaf, 0xe9, 0xcc, 0x51, 0x5f, 0xce, 0xda, 0x45, 0x84, 0xae, 0xf9, 0xba, 0xe7,
	0x90, 0x87, 0x00, 0x82, 0x0b, 0x31, 0xf3, 0x5c, 0x0c, 0x67, 0x74, 0x38, 0x44, 0x7a, 0x0e, 0x79,
	0x0a, 0x35, 0x97, 0xcb, 0xf9, 0xec, 0x96, 0xc6, 0x58, 0x59, 0xc5, 0x3a, 0xd5, 0x81, 0xe1, 0x86,
	0x6b, 0xfd, 0x66, 0x00, 0xd1, 0x75, 0xc7, 0xbe, 0xc3, 0x24, 0x17, 0x43, 0xc9, 0x24, 0x27, 0x55,
	0xc8, 0xfa, 0x52, 0x84, 0xb2, 0xf1, 0x48, 0x9a, 0x50, 0xf4, 0xa5, 0xa0, 0x13, 0x6f, 0xe5, 0x4a,
	0x55, 0xd2, 0xb4, 0x0b, 0xbe, 0x14, 0x1d, 0x7c, 0x46, 0x7a, 0x20, 0x85, 0xaa, 0x61, 0xda, 0x78,
	0x44, 0x7a, 0xb0, 0xa5, 0xe7, 0x34, 0x3d, 0x88, 0xd1, 0x05, 0x0f, 0xea, 0xa6, 0xa6, 0x0b, 0x1e,
	0x20, 0x5d, 0xf0, 0x80, 0x0a, 0xc9, 0x96, 0xb2, 0x7e, 0xa2, 0xe9, 0x82, 0x07, 0x43, 0x7c, 0x26,
	0x04, 0x72, 0x28, 0xad, 0x9e, 0x57, 0xb8, 0x3a, 0x5b, 0x4d, 0xb8, 0xe8, 0x78, 0xae, 0xcb, 0x27,
	0x72, 0xe4, 0x85, 0x6e, 0x86, 0x7c, 0xf9, 0x23, 0x5f, 0xda, 0x3c, 0xb0, 0x6e, 0xe0, 0x22, 0x81,
	0x85, 0x4c, 0x8e, 0xcd, 0xd6, 0xa5, 0x10, 0xdd, 0xb4, 0x56, 0x95, 0x42, 0xa0, 0xe7, 0x90, 0x0f,
	0xa1, 0x14, 0x06, 0x5d, 0xb6, 0xe0, 0xca, 0x67, 0xd1, 0x06, 0x0d, 0xf5, 0xd9, 0x82, 0x5b, 0xbf,
	0x1b, 0x70, 0x8a, 0xb3, 0x0a, 0xbb, 0xa5, 0x86, 0xdd, 0x86, 0xe2, 0x44, 0xb5, 0x70, 0x93, 0xb1,
	0xd4, 0x7e, 0xd0, 0x0a, 0x57, 0xa8, 0x15, 0x1f, 0xac, 0x5d, 0xd0, 0xbc, 0x9e, 0x43, 0x3e, 0x07,
	0x53, 0x60, 0xa7, 0x55, 0x89, 0x52, 0xbb, 0xb9, 0xe5, 0xa7, 0x87, 0x61, 0x6b, 0x26, 0x79, 0x02,
	0xa7, 0x4b, 0xf6, 0x86, 0x3a, 0x4c, 0x32, 0x3a, 0xe5, 0xcc, 0xe1, 0x4b, 0xd5, 0xf0, 0x7b, 0xf6,
	0xbd, 0x25, 0x7b, 0x83, 0x42, 0xae, 0x14, 0x48, 0x2e, 0xa0, 0xb0, 0xe1, 0xa9, 0xce, 0x97, 0xed,
	0x7c, 0x48, 0xb0, 0xfe, 0x31, 0xe0, 0x7c, 0xb8, 0x76, 0x27, 0xc3, 0xa9, 0xb7, 0x94, 0xe1, 0xbe,
	0xda, 0x3c, 0x58, 0x71, 0x21, 0xef, 0xe4, 0xa2, 0x05, 0x45, 0x7f, 0x25, 0xa6, 0x7a, 0xc7, 0xd1,
	0x49, 0xa5, 0x5d, 0xdb, 0x7e, 0x07, 0x0b, 0xe1, 0xa6, 0xdb, 0x05, 0xe4, 0xe0, 0x89, 0x3c, 0x86,
	0x0a, 0x9e, 0xa5, 0x47, 0x57, 0x42, 0x0f, 0x40, 0xaf, 0x4c, 0x59, 0xa3, 0x63, 0xa1, 0x86, 0x70,
	0x0e, 0x79, 0x9f, 0xeb, 0xb0, 0xde, 0x9c, 0x13, 0x7c, 0xec, 0x39, 0xe4, 0xcb, 0xb0, 0x9c, 0xb2,
	0x66, 0x2a, 0x89, 0x8f, 0xb6, 0xe5, 0x46, 0xdf, 0xd2, 0x95, 0xea, 0x5a, 0xc2, 0x9c, 0xaa, 0xad,
	0xbc, 0xff, 0x61, 0xc0, 0xc5, 0x38, 0x4d, 0x08, 0xdd, 0x27, 0x9c, 0x18, 0x77, 0x71, 0x92, 0x39,
	0xee, 0x24, 0x7b, 0xd8, 0x49, 0xee, 0x7f, 0x3a, 0xf9, 0x25, 0x03, 0xcd, 0xed, 0x14, 0x3b, 0x53,
	0xf6, 0xee, 0x4e, 0xf2, 0x12, 0xca, 0xca, 0xff, 0x64, 0xca, 0x64, 0x34, 0x4e, 0x40, 0x0c, 0x75,
	0xf7, 0x1c, 0xf2, 0x75, 0x7a, 0xa4, 0xd6, 0x81, 0x46, 0xc4, 0x9d, 0x46, 0xcd, 0xf8, 0xcb, 0x80,
	0x87, 0xe3, 0xfd, 0xa4, 0xb7, 0x3a, 0xda, 0x5d, 0x6b, 0xd9, 0xe3, 0xd6, 0x72, 0x77, 0xb0, 0xf6,
	0x73, 0x06, 0x6a, 0xa8, 0x4f, 0xdb, 0x7b, 0xf7, 0xa6, 0x8b, 0x7f, 0x09, 0xd8, 0x02, 0x95, 0x35,
	0xbc, 0xe3, 0x11, 0x50, 0x29, 0x62, 0xab, 0x6f, 0x26, 0x56, 0xff, 0xd3, 0x78, 0x5b, 0x4e, 0x94,
	0xfe, 0xd3, 0xad, 0x96, 0xd0, 0x6a, 0xd4, 0x83, 0x3f, 0x0d, 0xa8, 0x45, 0xf7, 0xed, 0xdb, 0x1d,
	0x69, 0xc2, 0x4f, 0xf6, 0xb0, 0x9f, 0xdc, 0x61, 0x3f, 0xe6, 0x7f, 0xf8, 0x79, 0xfa, 0xab, 0x01,
	0x85, 0x8d, 0x40, 0xf2, 0x00, 0x6a, 0xc3, 0x9b, 0x7e, 0x87, 0x8e, 0x6e, 0x06, 0x5d, 0x3a, 0xee,
	0x5f, 0xf7, 0x5f, 0xbe, 0xee, 0x57, 0xdf, 0x23, 0x04, 0x2a, 0x31, 0x78, 0xd8, 0xb5, 0xab, 0x06,
	0xa9, 0xc3, 0xfd, 0x24, 0x46, 0xfb, 0x2f, 0x47, 0x2f, 0xba, 0xd5, 0x0c, 0x39, 0x03, 0x12, 0x45,
	0xbe, 0x19, 0x8f, 0xae, 0xe8, 0x75, 0xf7, 0xa6, 0x9a, 0x25, 0x4d, 0x38, 0x4f, 0xe3, 0x3a, 0x5d,
	0x8e, 0x5c, 0xc2, 0x07, 0x07, 0x82, 0x3a, 0xad, 0xd9, 0xfe, 0x3b, 0x0b, 0x79, 0x7b, 0xd0, 0x41,
	0xad, 0xe4, 0x35, 0x9c, 0x45, 0x7b, 0x18, 0xbf, 0x94, 0xc8, 0x65, 0xa2, 0xeb, 0x7b, 0x2e, 0xd6,
	0xc6, 0xb1, 0x7f, 0x36, 0xd2, 0x87, 0xb3, 0x68, 0xb8, 0x89, 0xc4, 0xd6, 0x4e, 0x0b, 0xf7, 0xa5,
	0xae, 0x6e, 0x39, 0xe1, 0x8b, 0x14, 0xa1, 0xd0, 0xd8, 0x11, 0x1a, 0xfb, 0x65, 0x91, 0xc7, 0x69,
	0xb1, 0xe9, 0xeb, 0xe2, 0xb8, 0xe0, 0x57, 0xd0, 0xd8, 0x11, 0x1c, 0x2f, 0xf0, 0x64, 0x9f, 0xe8,
	0x3d, 0x25, 0xd2, 0xc2, 0x7b, 0x50, 0x89, 0x84, 0xab, 0x97, 0x8a, 0x46, 0x42, 0x6c, 0x62, 0xfd,
	0x8f, 0x4b, 0xfc, 0x0a, 0x2a, 0x91, 0xc4, 0x9d, 0x54, 0xa9, 0x5f, 0x52, 0x5a, 0xca, 0xb3, 0x8f,
	0xe1, 0xfd, 0x89, 0xb7, 0x68, 0xb9, 0xfc, 0x76, 0x35, 0x67, 0xb3, 0x45, 0x4b, 0xbf, 0x1e, 0x3f,
	0x83, 0xef, 0x06, 0xf8, 0x89, 0x62, 0xae, 0x32, 0x03, 0xe3, 0xf6, 0x44, 0xc1, 0x5f, 0xfc, 0x1b,
	0x00, 0x00, 0xff, 0xff, 0x7a, 0x95, 0x4c, 0x16, 0x3f, 0x0b, 0x00, 0x00,
}
