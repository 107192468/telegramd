// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sync.proto

package zproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import mtproto2 "github.com/nebulaim/telegramd/mtproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 同步类型
type SyncType int32

const (
	SyncType_SYNC_TYPE_UNKNOWN            SyncType = 0
	SyncType_SYNC_TYPE_USER               SyncType = 1
	SyncType_SYNC_TYPE_USER_NOTME         SyncType = 2
	SyncType_SYNC_TYPE_AUTH_KEY           SyncType = 3
	SyncType_SYNC_TYPE_AUTH_KEY_USER      SyncType = 4
	SyncType_SYNC_TYPE_AUTH_KEY_USERNOTME SyncType = 5
)

var SyncType_name = map[int32]string{
	0: "SYNC_TYPE_UNKNOWN",
	1: "SYNC_TYPE_USER",
	2: "SYNC_TYPE_USER_NOTME",
	3: "SYNC_TYPE_AUTH_KEY",
	4: "SYNC_TYPE_AUTH_KEY_USER",
	5: "SYNC_TYPE_AUTH_KEY_USERNOTME",
}
var SyncType_value = map[string]int32{
	"SYNC_TYPE_UNKNOWN":            0,
	"SYNC_TYPE_USER":               1,
	"SYNC_TYPE_USER_NOTME":         2,
	"SYNC_TYPE_AUTH_KEY":           3,
	"SYNC_TYPE_AUTH_KEY_USER":      4,
	"SYNC_TYPE_AUTH_KEY_USERNOTME": 5,
}

func (x SyncType) String() string {
	return proto.EnumName(SyncType_name, int32(x))
}
func (SyncType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

// /////////////////////////////////////////////////////////////////////
// ServerAuthReq ==> VoidRsp
// SERVER_AUTH_REQ
type ServerAuthReq struct {
	ServerId   int32  `protobuf:"varint,1,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	ServerName string `protobuf:"bytes,2,opt,name=server_name,json=serverName" json:"server_name,omitempty"`
}

func (m *ServerAuthReq) Reset()                    { *m = ServerAuthReq{} }
func (m *ServerAuthReq) String() string            { return proto.CompactTextString(m) }
func (*ServerAuthReq) ProtoMessage()               {}
func (*ServerAuthReq) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *ServerAuthReq) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *ServerAuthReq) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

type PushUpdatesData struct {
	AuthKeyId       int64  `protobuf:"varint,1,opt,name=auth_key_id,json=authKeyId" json:"auth_key_id,omitempty"`
	SessionId       int64  `protobuf:"varint,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	NetlibSessionId int64  `protobuf:"varint,3,opt,name=netlib_session_id,json=netlibSessionId" json:"netlib_session_id,omitempty"`
	RawDataHeader   uint32 `protobuf:"varint,4,opt,name=raw_data_header,json=rawDataHeader" json:"raw_data_header,omitempty"`
	RawData         []byte `protobuf:"bytes,5,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
}

func (m *PushUpdatesData) Reset()                    { *m = PushUpdatesData{} }
func (m *PushUpdatesData) String() string            { return proto.CompactTextString(m) }
func (*PushUpdatesData) ProtoMessage()               {}
func (*PushUpdatesData) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *PushUpdatesData) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *PushUpdatesData) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *PushUpdatesData) GetNetlibSessionId() int64 {
	if m != nil {
		return m.NetlibSessionId
	}
	return 0
}

func (m *PushUpdatesData) GetRawDataHeader() uint32 {
	if m != nil {
		return m.RawDataHeader
	}
	return 0
}

func (m *PushUpdatesData) GetRawData() []byte {
	if m != nil {
		return m.RawData
	}
	return nil
}

//
type DeliveryUpdatesToUsers struct {
	MyAuthKeyId       int64   `protobuf:"varint,1,opt,name=my_auth_key_id,json=myAuthKeyId" json:"my_auth_key_id,omitempty"`
	MySessionId       int64   `protobuf:"varint,2,opt,name=my_session_id,json=mySessionId" json:"my_session_id,omitempty"`
	MyNetlibSessionId int64   `protobuf:"varint,3,opt,name=my_netlib_session_id,json=myNetlibSessionId" json:"my_netlib_session_id,omitempty"`
	SendtoUserIdList  []int32 `protobuf:"varint,4,rep,packed,name=sendto_user_id_list,json=sendtoUserIdList" json:"sendto_user_id_list,omitempty"`
	// uint32 raw_data_header = 4;
	RawData []byte `protobuf:"bytes,5,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
}

func (m *DeliveryUpdatesToUsers) Reset()                    { *m = DeliveryUpdatesToUsers{} }
func (m *DeliveryUpdatesToUsers) String() string            { return proto.CompactTextString(m) }
func (*DeliveryUpdatesToUsers) ProtoMessage()               {}
func (*DeliveryUpdatesToUsers) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *DeliveryUpdatesToUsers) GetMyAuthKeyId() int64 {
	if m != nil {
		return m.MyAuthKeyId
	}
	return 0
}

func (m *DeliveryUpdatesToUsers) GetMySessionId() int64 {
	if m != nil {
		return m.MySessionId
	}
	return 0
}

func (m *DeliveryUpdatesToUsers) GetMyNetlibSessionId() int64 {
	if m != nil {
		return m.MyNetlibSessionId
	}
	return 0
}

func (m *DeliveryUpdatesToUsers) GetSendtoUserIdList() []int32 {
	if m != nil {
		return m.SendtoUserIdList
	}
	return nil
}

func (m *DeliveryUpdatesToUsers) GetRawData() []byte {
	if m != nil {
		return m.RawData
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////
type PushShortMessage struct {
	PushType   SyncType                       `protobuf:"varint,1,opt,name=push_type,json=pushType,enum=zproto.SyncType" json:"push_type,omitempty"`
	PushUserId int32                          `protobuf:"varint,2,opt,name=push_user_id,json=pushUserId" json:"push_user_id,omitempty"`
	PushData   *mtproto2.TLUpdateShortMessage `protobuf:"bytes,3,opt,name=push_data,json=pushData" json:"push_data,omitempty"`
}

func (m *PushShortMessage) Reset()                    { *m = PushShortMessage{} }
func (m *PushShortMessage) String() string            { return proto.CompactTextString(m) }
func (*PushShortMessage) ProtoMessage()               {}
func (*PushShortMessage) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *PushShortMessage) GetPushType() SyncType {
	if m != nil {
		return m.PushType
	}
	return SyncType_SYNC_TYPE_UNKNOWN
}

func (m *PushShortMessage) GetPushUserId() int32 {
	if m != nil {
		return m.PushUserId
	}
	return 0
}

func (m *PushShortMessage) GetPushData() *mtproto2.TLUpdateShortMessage {
	if m != nil {
		return m.PushData
	}
	return nil
}

// UpdateShortMessageRequest --> DeliveryRsp
type UpdateShortMessageRequest struct {
	SenderAuthKeyId       int64               `protobuf:"varint,1,opt,name=sender_auth_key_id,json=senderAuthKeyId" json:"sender_auth_key_id,omitempty"`
	SenderSessionId       int64               `protobuf:"varint,2,opt,name=sender_session_id,json=senderSessionId" json:"sender_session_id,omitempty"`
	SenderNetlibSessionId int64               `protobuf:"varint,3,opt,name=sender_netlib_session_id,json=senderNetlibSessionId" json:"sender_netlib_session_id,omitempty"`
	SenderUserId          int32               `protobuf:"varint,4,opt,name=sender_user_id,json=senderUserId" json:"sender_user_id,omitempty"`
	PeerUserId            int32               `protobuf:"varint,5,opt,name=peer_user_id,json=peerUserId" json:"peer_user_id,omitempty"`
	PushDatas             []*PushShortMessage `protobuf:"bytes,6,rep,name=push_datas,json=pushDatas" json:"push_datas,omitempty"`
}

func (m *UpdateShortMessageRequest) Reset()                    { *m = UpdateShortMessageRequest{} }
func (m *UpdateShortMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateShortMessageRequest) ProtoMessage()               {}
func (*UpdateShortMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *UpdateShortMessageRequest) GetSenderAuthKeyId() int64 {
	if m != nil {
		return m.SenderAuthKeyId
	}
	return 0
}

func (m *UpdateShortMessageRequest) GetSenderSessionId() int64 {
	if m != nil {
		return m.SenderSessionId
	}
	return 0
}

func (m *UpdateShortMessageRequest) GetSenderNetlibSessionId() int64 {
	if m != nil {
		return m.SenderNetlibSessionId
	}
	return 0
}

func (m *UpdateShortMessageRequest) GetSenderUserId() int32 {
	if m != nil {
		return m.SenderUserId
	}
	return 0
}

func (m *UpdateShortMessageRequest) GetPeerUserId() int32 {
	if m != nil {
		return m.PeerUserId
	}
	return 0
}

func (m *UpdateShortMessageRequest) GetPushDatas() []*PushShortMessage {
	if m != nil {
		return m.PushDatas
	}
	return nil
}

type PushShortChatMessage struct {
	PushType   SyncType                           `protobuf:"varint,1,opt,name=push_type,json=pushType,enum=zproto.SyncType" json:"push_type,omitempty"`
	PushUserId int32                              `protobuf:"varint,2,opt,name=push_user_id,json=pushUserId" json:"push_user_id,omitempty"`
	PushData   *mtproto2.TLUpdateShortChatMessage `protobuf:"bytes,3,opt,name=push_data,json=pushData" json:"push_data,omitempty"`
}

func (m *PushShortChatMessage) Reset()                    { *m = PushShortChatMessage{} }
func (m *PushShortChatMessage) String() string            { return proto.CompactTextString(m) }
func (*PushShortChatMessage) ProtoMessage()               {}
func (*PushShortChatMessage) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *PushShortChatMessage) GetPushType() SyncType {
	if m != nil {
		return m.PushType
	}
	return SyncType_SYNC_TYPE_UNKNOWN
}

func (m *PushShortChatMessage) GetPushUserId() int32 {
	if m != nil {
		return m.PushUserId
	}
	return 0
}

func (m *PushShortChatMessage) GetPushData() *mtproto2.TLUpdateShortChatMessage {
	if m != nil {
		return m.PushData
	}
	return nil
}

// UpdatShortChatMessageRequest --> DeliveryRsp
type UpdatShortChatMessageRequest struct {
	SenderAuthKeyId       int64 `protobuf:"varint,1,opt,name=sender_auth_key_id,json=senderAuthKeyId" json:"sender_auth_key_id,omitempty"`
	SenderSessionId       int64 `protobuf:"varint,2,opt,name=sender_session_id,json=senderSessionId" json:"sender_session_id,omitempty"`
	SenderNetlibSessionId int64 `protobuf:"varint,3,opt,name=sender_netlib_session_id,json=senderNetlibSessionId" json:"sender_netlib_session_id,omitempty"`
	SenderUserId          int32 `protobuf:"varint,4,opt,name=sender_user_id,json=senderUserId" json:"sender_user_id,omitempty"`
	PeerChatId            int32 `protobuf:"varint,5,opt,name=peer_chat_id,json=peerChatId" json:"peer_chat_id,omitempty"`
	// 首记录为发送者
	PushDatas []*PushShortChatMessage `protobuf:"bytes,6,rep,name=push_datas,json=pushDatas" json:"push_datas,omitempty"`
}

func (m *UpdatShortChatMessageRequest) Reset()                    { *m = UpdatShortChatMessageRequest{} }
func (m *UpdatShortChatMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatShortChatMessageRequest) ProtoMessage()               {}
func (*UpdatShortChatMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *UpdatShortChatMessageRequest) GetSenderAuthKeyId() int64 {
	if m != nil {
		return m.SenderAuthKeyId
	}
	return 0
}

func (m *UpdatShortChatMessageRequest) GetSenderSessionId() int64 {
	if m != nil {
		return m.SenderSessionId
	}
	return 0
}

func (m *UpdatShortChatMessageRequest) GetSenderNetlibSessionId() int64 {
	if m != nil {
		return m.SenderNetlibSessionId
	}
	return 0
}

func (m *UpdatShortChatMessageRequest) GetSenderUserId() int32 {
	if m != nil {
		return m.SenderUserId
	}
	return 0
}

func (m *UpdatShortChatMessageRequest) GetPeerChatId() int32 {
	if m != nil {
		return m.PeerChatId
	}
	return 0
}

func (m *UpdatShortChatMessageRequest) GetPushDatas() []*PushShortChatMessage {
	if m != nil {
		return m.PushDatas
	}
	return nil
}

type PushUpdates struct {
	PushType   SyncType            `protobuf:"varint,1,opt,name=push_type,json=pushType,enum=zproto.SyncType" json:"push_type,omitempty"`
	PushUserId int32               `protobuf:"varint,2,opt,name=push_user_id,json=pushUserId" json:"push_user_id,omitempty"`
	PushData   *mtproto2.TLUpdates `protobuf:"bytes,3,opt,name=push_data,json=pushData" json:"push_data,omitempty"`
}

func (m *PushUpdates) Reset()                    { *m = PushUpdates{} }
func (m *PushUpdates) String() string            { return proto.CompactTextString(m) }
func (*PushUpdates) ProtoMessage()               {}
func (*PushUpdates) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *PushUpdates) GetPushType() SyncType {
	if m != nil {
		return m.PushType
	}
	return SyncType_SYNC_TYPE_UNKNOWN
}

func (m *PushUpdates) GetPushUserId() int32 {
	if m != nil {
		return m.PushUserId
	}
	return 0
}

func (m *PushUpdates) GetPushData() *mtproto2.TLUpdates {
	if m != nil {
		return m.PushData
	}
	return nil
}

// UpdatesRequest --> DeliveryRsp
type UpdatesRequest struct {
	SenderAuthKeyId       int64          `protobuf:"varint,1,opt,name=sender_auth_key_id,json=senderAuthKeyId" json:"sender_auth_key_id,omitempty"`
	SenderSessionId       int64          `protobuf:"varint,2,opt,name=sender_session_id,json=senderSessionId" json:"sender_session_id,omitempty"`
	SenderNetlibSessionId int64          `protobuf:"varint,3,opt,name=sender_netlib_session_id,json=senderNetlibSessionId" json:"sender_netlib_session_id,omitempty"`
	SenderUserId          int32          `protobuf:"varint,4,opt,name=sender_user_id,json=senderUserId" json:"sender_user_id,omitempty"`
	PushDatas             []*PushUpdates `protobuf:"bytes,5,rep,name=push_datas,json=pushDatas" json:"push_datas,omitempty"`
}

func (m *UpdatesRequest) Reset()                    { *m = UpdatesRequest{} }
func (m *UpdatesRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatesRequest) ProtoMessage()               {}
func (*UpdatesRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *UpdatesRequest) GetSenderAuthKeyId() int64 {
	if m != nil {
		return m.SenderAuthKeyId
	}
	return 0
}

func (m *UpdatesRequest) GetSenderSessionId() int64 {
	if m != nil {
		return m.SenderSessionId
	}
	return 0
}

func (m *UpdatesRequest) GetSenderNetlibSessionId() int64 {
	if m != nil {
		return m.SenderNetlibSessionId
	}
	return 0
}

func (m *UpdatesRequest) GetSenderUserId() int32 {
	if m != nil {
		return m.SenderUserId
	}
	return 0
}

func (m *UpdatesRequest) GetPushDatas() []*PushUpdates {
	if m != nil {
		return m.PushDatas
	}
	return nil
}

type DeliveryRsp struct {
	Date     int32 `protobuf:"varint,1,opt,name=date" json:"date,omitempty"`
	Pts      int32 `protobuf:"varint,2,opt,name=pts" json:"pts,omitempty"`
	PtsCount int32 `protobuf:"varint,3,opt,name=pts_count,json=ptsCount" json:"pts_count,omitempty"`
	Qts      int32 `protobuf:"varint,4,opt,name=qts" json:"qts,omitempty"`
	SeqStart int32 `protobuf:"varint,5,opt,name=seq_start,json=seqStart" json:"seq_start,omitempty"`
	Seq      int32 `protobuf:"varint,6,opt,name=seq" json:"seq,omitempty"`
}

func (m *DeliveryRsp) Reset()                    { *m = DeliveryRsp{} }
func (m *DeliveryRsp) String() string            { return proto.CompactTextString(m) }
func (*DeliveryRsp) ProtoMessage()               {}
func (*DeliveryRsp) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *DeliveryRsp) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *DeliveryRsp) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *DeliveryRsp) GetPtsCount() int32 {
	if m != nil {
		return m.PtsCount
	}
	return 0
}

func (m *DeliveryRsp) GetQts() int32 {
	if m != nil {
		return m.Qts
	}
	return 0
}

func (m *DeliveryRsp) GetSeqStart() int32 {
	if m != nil {
		return m.SeqStart
	}
	return 0
}

func (m *DeliveryRsp) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func init() {
	proto.RegisterType((*ServerAuthReq)(nil), "zproto.ServerAuthReq")
	proto.RegisterType((*PushUpdatesData)(nil), "zproto.PushUpdatesData")
	proto.RegisterType((*DeliveryUpdatesToUsers)(nil), "zproto.DeliveryUpdatesToUsers")
	proto.RegisterType((*PushShortMessage)(nil), "zproto.PushShortMessage")
	proto.RegisterType((*UpdateShortMessageRequest)(nil), "zproto.UpdateShortMessageRequest")
	proto.RegisterType((*PushShortChatMessage)(nil), "zproto.PushShortChatMessage")
	proto.RegisterType((*UpdatShortChatMessageRequest)(nil), "zproto.UpdatShortChatMessageRequest")
	proto.RegisterType((*PushUpdates)(nil), "zproto.PushUpdates")
	proto.RegisterType((*UpdatesRequest)(nil), "zproto.UpdatesRequest")
	proto.RegisterType((*DeliveryRsp)(nil), "zproto.DeliveryRsp")
	proto.RegisterEnum("zproto.SyncType", SyncType_name, SyncType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RPCSync service

type RPCSyncClient interface {
	// frontend --> sync
	PushUpdatesStream(ctx context.Context, in *ServerAuthReq, opts ...grpc.CallOption) (RPCSync_PushUpdatesStreamClient, error)
	// rpc ServerAuth(ServerAuthReq) returns (VoidRsp);
	DeliveryUpdates(ctx context.Context, in *DeliveryUpdatesToUsers, opts ...grpc.CallOption) (*VoidRsp, error)
	DeliveryUpdatesNotMe(ctx context.Context, in *DeliveryUpdatesToUsers, opts ...grpc.CallOption) (*VoidRsp, error)
	// DeliveryUpdateShortMessage
	DeliveryUpdateShortMessage(ctx context.Context, in *UpdateShortMessageRequest, opts ...grpc.CallOption) (*DeliveryRsp, error)
	DeliveryUpdatShortChatMessage(ctx context.Context, in *UpdatShortChatMessageRequest, opts ...grpc.CallOption) (*DeliveryRsp, error)
	DeliveryUpdates2(ctx context.Context, in *UpdatesRequest, opts ...grpc.CallOption) (*DeliveryRsp, error)
}

type rPCSyncClient struct {
	cc *grpc.ClientConn
}

func NewRPCSyncClient(cc *grpc.ClientConn) RPCSyncClient {
	return &rPCSyncClient{cc}
}

func (c *rPCSyncClient) PushUpdatesStream(ctx context.Context, in *ServerAuthReq, opts ...grpc.CallOption) (RPCSync_PushUpdatesStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RPCSync_serviceDesc.Streams[0], c.cc, "/zproto.RPCSync/PushUpdatesStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCSyncPushUpdatesStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RPCSync_PushUpdatesStreamClient interface {
	Recv() (*PushUpdatesData, error)
	grpc.ClientStream
}

type rPCSyncPushUpdatesStreamClient struct {
	grpc.ClientStream
}

func (x *rPCSyncPushUpdatesStreamClient) Recv() (*PushUpdatesData, error) {
	m := new(PushUpdatesData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPCSyncClient) DeliveryUpdates(ctx context.Context, in *DeliveryUpdatesToUsers, opts ...grpc.CallOption) (*VoidRsp, error) {
	out := new(VoidRsp)
	err := grpc.Invoke(ctx, "/zproto.RPCSync/DeliveryUpdates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSyncClient) DeliveryUpdatesNotMe(ctx context.Context, in *DeliveryUpdatesToUsers, opts ...grpc.CallOption) (*VoidRsp, error) {
	out := new(VoidRsp)
	err := grpc.Invoke(ctx, "/zproto.RPCSync/DeliveryUpdatesNotMe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSyncClient) DeliveryUpdateShortMessage(ctx context.Context, in *UpdateShortMessageRequest, opts ...grpc.CallOption) (*DeliveryRsp, error) {
	out := new(DeliveryRsp)
	err := grpc.Invoke(ctx, "/zproto.RPCSync/DeliveryUpdateShortMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSyncClient) DeliveryUpdatShortChatMessage(ctx context.Context, in *UpdatShortChatMessageRequest, opts ...grpc.CallOption) (*DeliveryRsp, error) {
	out := new(DeliveryRsp)
	err := grpc.Invoke(ctx, "/zproto.RPCSync/DeliveryUpdatShortChatMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSyncClient) DeliveryUpdates2(ctx context.Context, in *UpdatesRequest, opts ...grpc.CallOption) (*DeliveryRsp, error) {
	out := new(DeliveryRsp)
	err := grpc.Invoke(ctx, "/zproto.RPCSync/DeliveryUpdates2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPCSync service

type RPCSyncServer interface {
	// frontend --> sync
	PushUpdatesStream(*ServerAuthReq, RPCSync_PushUpdatesStreamServer) error
	// rpc ServerAuth(ServerAuthReq) returns (VoidRsp);
	DeliveryUpdates(context.Context, *DeliveryUpdatesToUsers) (*VoidRsp, error)
	DeliveryUpdatesNotMe(context.Context, *DeliveryUpdatesToUsers) (*VoidRsp, error)
	// DeliveryUpdateShortMessage
	DeliveryUpdateShortMessage(context.Context, *UpdateShortMessageRequest) (*DeliveryRsp, error)
	DeliveryUpdatShortChatMessage(context.Context, *UpdatShortChatMessageRequest) (*DeliveryRsp, error)
	DeliveryUpdates2(context.Context, *UpdatesRequest) (*DeliveryRsp, error)
}

func RegisterRPCSyncServer(s *grpc.Server, srv RPCSyncServer) {
	s.RegisterService(&_RPCSync_serviceDesc, srv)
}

func _RPCSync_PushUpdatesStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerAuthReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RPCSyncServer).PushUpdatesStream(m, &rPCSyncPushUpdatesStreamServer{stream})
}

type RPCSync_PushUpdatesStreamServer interface {
	Send(*PushUpdatesData) error
	grpc.ServerStream
}

type rPCSyncPushUpdatesStreamServer struct {
	grpc.ServerStream
}

func (x *rPCSyncPushUpdatesStreamServer) Send(m *PushUpdatesData) error {
	return x.ServerStream.SendMsg(m)
}

func _RPCSync_DeliveryUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryUpdatesToUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSyncServer).DeliveryUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zproto.RPCSync/DeliveryUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSyncServer).DeliveryUpdates(ctx, req.(*DeliveryUpdatesToUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSync_DeliveryUpdatesNotMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryUpdatesToUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSyncServer).DeliveryUpdatesNotMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zproto.RPCSync/DeliveryUpdatesNotMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSyncServer).DeliveryUpdatesNotMe(ctx, req.(*DeliveryUpdatesToUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSync_DeliveryUpdateShortMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShortMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSyncServer).DeliveryUpdateShortMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zproto.RPCSync/DeliveryUpdateShortMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSyncServer).DeliveryUpdateShortMessage(ctx, req.(*UpdateShortMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSync_DeliveryUpdatShortChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatShortChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSyncServer).DeliveryUpdatShortChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zproto.RPCSync/DeliveryUpdatShortChatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSyncServer).DeliveryUpdatShortChatMessage(ctx, req.(*UpdatShortChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSync_DeliveryUpdates2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSyncServer).DeliveryUpdates2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zproto.RPCSync/DeliveryUpdates2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSyncServer).DeliveryUpdates2(ctx, req.(*UpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zproto.RPCSync",
	HandlerType: (*RPCSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeliveryUpdates",
			Handler:    _RPCSync_DeliveryUpdates_Handler,
		},
		{
			MethodName: "DeliveryUpdatesNotMe",
			Handler:    _RPCSync_DeliveryUpdatesNotMe_Handler,
		},
		{
			MethodName: "DeliveryUpdateShortMessage",
			Handler:    _RPCSync_DeliveryUpdateShortMessage_Handler,
		},
		{
			MethodName: "DeliveryUpdatShortChatMessage",
			Handler:    _RPCSync_DeliveryUpdatShortChatMessage_Handler,
		},
		{
			MethodName: "DeliveryUpdates2",
			Handler:    _RPCSync_DeliveryUpdates2_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushUpdatesStream",
			Handler:       _RPCSync_PushUpdatesStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sync.proto",
}

func init() { proto.RegisterFile("sync.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 963 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x96, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0xc7, 0x4b, 0x7d, 0x38, 0xd2, 0xc8, 0xfa, 0x5a, 0xd9, 0x0e, 0xa3, 0x38, 0xae, 0xaa, 0xa6,
	0x85, 0xe0, 0x22, 0x52, 0xa0, 0x1e, 0x72, 0xe8, 0x21, 0xb0, 0x1d, 0xa1, 0x36, 0x1c, 0x2b, 0x02,
	0x25, 0xb5, 0x70, 0x2e, 0x8b, 0xb5, 0xb8, 0x30, 0x85, 0x8a, 0x22, 0xc5, 0x5d, 0x26, 0x60, 0x9f,
	0xa2, 0x7d, 0x83, 0x9e, 0x8a, 0x9e, 0x7a, 0xeb, 0xb9, 0xaf, 0xd0, 0x07, 0xe8, 0xa3, 0xf4, 0x50,
	0xec, 0x72, 0x29, 0x51, 0xa2, 0x65, 0xa0, 0x40, 0x7b, 0x68, 0x4e, 0x5c, 0xcd, 0xfc, 0x3d, 0x9e,
	0xff, 0xfc, 0x56, 0x1c, 0x01, 0xb0, 0x60, 0x3e, 0x69, 0xbb, 0x9e, 0xc3, 0x1d, 0xb4, 0xf3, 0xbd,
	0x7c, 0xd6, 0x8b, 0x36, 0x65, 0x8c, 0xdc, 0xd2, 0x30, 0x5c, 0x3f, 0xbd, 0x9d, 0x72, 0xcb, 0xbf,
	0x69, 0x4f, 0x1c, 0xbb, 0x33, 0xa7, 0x37, 0xfe, 0x8c, 0x4c, 0xed, 0x0e, 0xa7, 0x33, 0x7a, 0xeb,
	0x11, 0xdb, 0xec, 0xd8, 0x5c, 0xca, 0x3a, 0x6c, 0x62, 0x51, 0x9b, 0x30, 0xf5, 0x6c, 0xf3, 0x59,
	0x7b, 0x55, 0xba, 0x79, 0x05, 0xc5, 0x21, 0xf5, 0xde, 0x51, 0xef, 0xc4, 0xe7, 0x96, 0x41, 0x17,
	0xe8, 0x31, 0xe4, 0x99, 0x0c, 0xe0, 0xa9, 0xa9, 0x6b, 0x0d, 0xad, 0x95, 0x35, 0x72, 0x61, 0xe0,
	0xc2, 0x44, 0x1f, 0x43, 0x41, 0x25, 0xe7, 0xc4, 0xa6, 0x7a, 0xaa, 0xa1, 0xb5, 0xf2, 0x06, 0x84,
	0xa1, 0x3e, 0xb1, 0x69, 0xf3, 0x77, 0x0d, 0xca, 0x03, 0x9f, 0x59, 0x63, 0xd7, 0x24, 0x9c, 0xb2,
	0x57, 0x84, 0x13, 0x74, 0x04, 0x05, 0xe2, 0x73, 0x0b, 0x7f, 0x47, 0x83, 0xa8, 0x66, 0xda, 0xc8,
	0x8b, 0xd0, 0x25, 0x0d, 0x2e, 0x4c, 0xf4, 0x04, 0x80, 0x51, 0xc6, 0xa6, 0xce, 0x5c, 0xa4, 0x53,
	0x61, 0x5a, 0x45, 0x2e, 0x4c, 0x74, 0x0c, 0xd5, 0x39, 0xe5, 0xb3, 0xe9, 0x0d, 0x8e, 0xa9, 0xd2,
	0x52, 0x55, 0x0e, 0x13, 0xc3, 0xa5, 0xf6, 0x73, 0x28, 0x7b, 0xe4, 0x3d, 0x36, 0x09, 0x27, 0xd8,
	0xa2, 0xc4, 0xa4, 0x9e, 0x9e, 0x69, 0x68, 0xad, 0xa2, 0x51, 0xf4, 0xc8, 0x7b, 0xd1, 0xcc, 0xb9,
	0x0c, 0xa2, 0x47, 0x90, 0x8b, 0x74, 0x7a, 0xb6, 0xa1, 0xb5, 0x76, 0x8d, 0x07, 0x4a, 0xd0, 0xfc,
	0x53, 0x83, 0x83, 0x57, 0x74, 0x36, 0x7d, 0x47, 0xbd, 0x40, 0xb9, 0x18, 0x39, 0x63, 0x46, 0x3d,
	0x86, 0x3e, 0x85, 0x92, 0x1d, 0xe0, 0xa4, 0x97, 0x82, 0x1d, 0x9c, 0x2c, 0xdd, 0x34, 0xa1, 0x68,
	0x07, 0x38, 0x61, 0xa8, 0x60, 0x07, 0xab, 0x36, 0x3b, 0xb0, 0x67, 0x07, 0x78, 0x9b, 0xab, 0xaa,
	0x1d, 0xf4, 0x37, 0x7c, 0x3d, 0x83, 0x1a, 0xa3, 0x73, 0x93, 0x3b, 0xd8, 0x67, 0x92, 0x0c, 0x9e,
	0x4d, 0x19, 0xd7, 0x33, 0x8d, 0x74, 0x2b, 0x6b, 0x54, 0xc2, 0x94, 0xe8, 0xf1, 0xc2, 0x7c, 0x3d,
	0x65, 0xfc, 0x3e, 0x7b, 0x3f, 0x69, 0x50, 0x11, 0x80, 0x86, 0x96, 0xe3, 0xf1, 0xab, 0xf0, 0x3a,
	0xa1, 0x67, 0x90, 0x77, 0x7d, 0x66, 0x61, 0x1e, 0xb8, 0x54, 0x7a, 0x2a, 0x75, 0x2b, 0xed, 0xf0,
	0xce, 0xb5, 0x87, 0xc1, 0x7c, 0x32, 0x0a, 0x5c, 0x6a, 0xe4, 0x84, 0x44, 0x9c, 0x50, 0x03, 0x76,
	0xa5, 0x5c, 0xf5, 0x22, 0x1d, 0x66, 0x0d, 0x10, 0xb1, 0xb0, 0x09, 0xf4, 0x95, 0x2a, 0x28, 0x3b,
	0x10, 0xae, 0x0a, 0xdd, 0xa3, 0xb6, 0xba, 0x8f, 0xed, 0xd1, 0x6b, 0xec, 0xcb, 0xc1, 0xc6, 0x7b,
	0x08, 0xcb, 0xcb, 0x16, 0x7f, 0x4d, 0xc1, 0xa3, 0x71, 0x52, 0x40, 0x17, 0x3e, 0x65, 0x1c, 0x7d,
	0x01, 0x48, 0xf8, 0xa5, 0xde, 0x1d, 0x20, 0xca, 0x61, 0x66, 0x05, 0xe3, 0x18, 0xaa, 0x4a, 0x9c,
	0x00, 0xa2, 0xb4, 0xab, 0x19, 0xbf, 0x00, 0x5d, 0x69, 0xb7, 0x81, 0xd9, 0x0f, 0xf3, 0x9b, 0x70,
	0x9e, 0x42, 0x49, 0xfd, 0x61, 0x34, 0x90, 0x8c, 0x1c, 0xc8, 0x6e, 0x18, 0x55, 0x23, 0x11, 0x43,
	0xa3, 0x31, 0x4d, 0x56, 0x0d, 0x8d, 0x2e, 0x15, 0x2f, 0x00, 0x96, 0x43, 0x63, 0xfa, 0x4e, 0x23,
	0xdd, 0x2a, 0x74, 0xf5, 0x08, 0xc3, 0x26, 0x33, 0x23, 0x1f, 0xcd, 0x8b, 0x35, 0x7f, 0xd1, 0x60,
	0x6f, 0x99, 0x3f, 0xb3, 0xc8, 0x7f, 0xc7, 0xf5, 0x65, 0x92, 0x6b, 0x73, 0x0b, 0xd7, 0x58, 0x1f,
	0x31, 0xb6, 0xbf, 0xa5, 0xe0, 0x50, 0xb2, 0x4d, 0x68, 0x3e, 0x10, 0xbc, 0x13, 0x8b, 0xf0, 0x0d,
	0xbc, 0xc2, 0xa5, 0xfc, 0x4e, 0x24, 0xf1, 0x1e, 0x26, 0xf0, 0xc6, 0x47, 0x12, 0x43, 0xfc, 0x83,
	0x06, 0x85, 0xd8, 0x7b, 0xf5, 0xdf, 0x27, 0xfb, 0x3c, 0x49, 0xb6, 0x96, 0x24, 0xcb, 0x62, 0x28,
	0xff, 0xd2, 0xa0, 0xa4, 0xda, 0xf9, 0xbf, 0xc3, 0xeb, 0xae, 0xa1, 0xc9, 0x4a, 0x34, 0xb5, 0x38,
	0x9a, 0xc8, 0x67, 0x8c, 0xc8, 0x8f, 0x1a, 0x14, 0xa2, 0x3d, 0x61, 0x30, 0x17, 0x21, 0xc8, 0x08,
	0x8d, 0x5a, 0x99, 0xf2, 0x8c, 0x2a, 0x90, 0x76, 0x39, 0x53, 0xd3, 0x16, 0x47, 0xb1, 0x5d, 0x5d,
	0xce, 0xf0, 0xc4, 0xf1, 0xe7, 0x5c, 0x76, 0x9e, 0x35, 0x72, 0x2e, 0x67, 0x67, 0xe2, 0xb3, 0x90,
	0x2f, 0x38, 0x53, 0x1d, 0x8a, 0x63, 0xb8, 0x8c, 0x17, 0x98, 0x71, 0xe2, 0x71, 0x75, 0xa5, 0x72,
	0x8c, 0x2e, 0x86, 0xe2, 0xb3, 0x90, 0x33, 0xba, 0xd0, 0x77, 0x42, 0x39, 0xa3, 0x8b, 0xe3, 0x9f,
	0x35, 0xc8, 0x45, 0xf4, 0xd1, 0x3e, 0x54, 0x87, 0xd7, 0xfd, 0x33, 0x3c, 0xba, 0x1e, 0xf4, 0xf0,
	0xb8, 0x7f, 0xd9, 0x7f, 0xf3, 0x6d, 0xbf, 0xf2, 0x11, 0x42, 0x50, 0x8a, 0x85, 0x87, 0x3d, 0xa3,
	0xa2, 0x21, 0x1d, 0xf6, 0xd6, 0x63, 0xb8, 0xff, 0x66, 0x74, 0xd5, 0xab, 0xa4, 0xd0, 0x01, 0xa0,
	0x55, 0xe6, 0x64, 0x3c, 0x3a, 0xc7, 0x97, 0xbd, 0xeb, 0x4a, 0x1a, 0x3d, 0x86, 0x87, 0xc9, 0x78,
	0x58, 0x2e, 0x83, 0x1a, 0x70, 0xb8, 0x25, 0x19, 0x96, 0xcd, 0x76, 0xff, 0x48, 0xc3, 0x03, 0x63,
	0x70, 0x26, 0x7a, 0x45, 0x3d, 0xa8, 0xc6, 0x46, 0x3c, 0xe4, 0x1e, 0x25, 0x36, 0xda, 0x5f, 0x5e,
	0xe6, 0xf8, 0x8f, 0x93, 0xfa, 0xc3, 0x3b, 0xa0, 0x08, 0x1c, 0xcf, 0x35, 0x74, 0x0a, 0xe5, 0x8d,
	0xb5, 0x8d, 0x8e, 0x22, 0xf5, 0xdd, 0xfb, 0xbc, 0x5e, 0x8e, 0xf2, 0xdf, 0x38, 0x53, 0x53, 0x30,
	0xfc, 0x1a, 0xf6, 0x36, 0xa4, 0x7d, 0x87, 0x5f, 0xd1, 0x7f, 0x5e, 0x68, 0x04, 0xf5, 0x75, 0xe9,
	0xda, 0xba, 0xfd, 0x24, 0x92, 0x6f, 0xdd, 0x72, 0xf5, 0xda, 0xe6, 0x7f, 0x14, 0x55, 0xdf, 0xc2,
	0x93, 0xb5, 0xaa, 0x89, 0xf7, 0xfd, 0xd3, 0xb5, 0xc2, 0x5b, 0x5e, 0xb1, 0x77, 0xd7, 0x7e, 0x09,
	0x95, 0x0d, 0x73, 0x5d, 0x74, 0xb0, 0xde, 0x27, 0xbb, 0xaf, 0xc0, 0xe9, 0x67, 0x50, 0x9b, 0x38,
	0x76, 0x3b, 0xfa, 0x1d, 0xaa, 0x24, 0xa7, 0xf0, 0x76, 0x20, 0x9e, 0x82, 0xf4, 0x79, 0x6a, 0xa0,
	0xdd, 0xec, 0xc8, 0xf0, 0x97, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xac, 0x3b, 0xea, 0xc4, 0xdf,
	0x0a, 0x00, 0x00,
}
