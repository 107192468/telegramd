// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auth_session.proto

package zproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AuthUserReq struct {
	AuthKeyId int64 `protobuf:"varint,1,opt,name=auth_key_id,json=authKeyId" json:"auth_key_id,omitempty"`
}

func (m *AuthUserReq) Reset()                    { *m = AuthUserReq{} }
func (m *AuthUserReq) String() string            { return proto.CompactTextString(m) }
func (*AuthUserReq) ProtoMessage()               {}
func (*AuthUserReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *AuthUserReq) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

type AuthUserRsp struct {
	AuthKeyId int64 `protobuf:"varint,1,opt,name=auth_key_id,json=authKeyId" json:"auth_key_id,omitempty"`
	UserId    int32 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *AuthUserRsp) Reset()                    { *m = AuthUserRsp{} }
func (m *AuthUserRsp) String() string            { return proto.CompactTextString(m) }
func (*AuthUserRsp) ProtoMessage()               {}
func (*AuthUserRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *AuthUserRsp) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *AuthUserRsp) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type OnlineStatus struct {
	UserId          int32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	AuthKeyId       int64 `protobuf:"varint,2,opt,name=auth_key_id,json=authKeyId" json:"auth_key_id,omitempty"`
	SessionId       int64 `protobuf:"varint,3,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	ServerId        int32 `protobuf:"varint,4,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	NetlibSessionId int64 `protobuf:"varint,5,opt,name=netlib_session_id,json=netlibSessionId" json:"netlib_session_id,omitempty"`
	Now             int64 `protobuf:"varint,6,opt,name=now" json:"now,omitempty"`
}

func (m *OnlineStatus) Reset()                    { *m = OnlineStatus{} }
func (m *OnlineStatus) String() string            { return proto.CompactTextString(m) }
func (*OnlineStatus) ProtoMessage()               {}
func (*OnlineStatus) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *OnlineStatus) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *OnlineStatus) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *OnlineStatus) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *OnlineStatus) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *OnlineStatus) GetNetlibSessionId() int64 {
	if m != nil {
		return m.NetlibSessionId
	}
	return 0
}

func (m *OnlineStatus) GetNow() int64 {
	if m != nil {
		return m.Now
	}
	return 0
}

func init() {
	proto.RegisterType((*AuthUserReq)(nil), "zproto.AuthUserReq")
	proto.RegisterType((*AuthUserRsp)(nil), "zproto.AuthUserRsp")
	proto.RegisterType((*OnlineStatus)(nil), "zproto.OnlineStatus")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RPCAuthSession service

type RPCAuthSessionClient interface {
	GetAuthUser(ctx context.Context, in *AuthUserReq, opts ...grpc.CallOption) (*AuthUserRsp, error)
	UpdateOnline(ctx context.Context, in *OnlineStatus, opts ...grpc.CallOption) (*VoidRsp, error)
}

type rPCAuthSessionClient struct {
	cc *grpc.ClientConn
}

func NewRPCAuthSessionClient(cc *grpc.ClientConn) RPCAuthSessionClient {
	return &rPCAuthSessionClient{cc}
}

func (c *rPCAuthSessionClient) GetAuthUser(ctx context.Context, in *AuthUserReq, opts ...grpc.CallOption) (*AuthUserRsp, error) {
	out := new(AuthUserRsp)
	err := grpc.Invoke(ctx, "/zproto.RPCAuthSession/GetAuthUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthSessionClient) UpdateOnline(ctx context.Context, in *OnlineStatus, opts ...grpc.CallOption) (*VoidRsp, error) {
	out := new(VoidRsp)
	err := grpc.Invoke(ctx, "/zproto.RPCAuthSession/UpdateOnline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPCAuthSession service

type RPCAuthSessionServer interface {
	GetAuthUser(context.Context, *AuthUserReq) (*AuthUserRsp, error)
	UpdateOnline(context.Context, *OnlineStatus) (*VoidRsp, error)
}

func RegisterRPCAuthSessionServer(s *grpc.Server, srv RPCAuthSessionServer) {
	s.RegisterService(&_RPCAuthSession_serviceDesc, srv)
}

func _RPCAuthSession_GetAuthUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthSessionServer).GetAuthUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zproto.RPCAuthSession/GetAuthUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthSessionServer).GetAuthUser(ctx, req.(*AuthUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthSession_UpdateOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthSessionServer).UpdateOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zproto.RPCAuthSession/UpdateOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthSessionServer).UpdateOnline(ctx, req.(*OnlineStatus))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCAuthSession_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zproto.RPCAuthSession",
	HandlerType: (*RPCAuthSessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAuthUser",
			Handler:    _RPCAuthSession_GetAuthUser_Handler,
		},
		{
			MethodName: "UpdateOnline",
			Handler:    _RPCAuthSession_UpdateOnline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth_session.proto",
}

func init() { proto.RegisterFile("auth_session.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xc1, 0x4f, 0xc2, 0x30,
	0x14, 0xc6, 0x53, 0x90, 0x29, 0x0f, 0x14, 0x29, 0x26, 0x12, 0x8c, 0x86, 0x70, 0x22, 0x46, 0x77,
	0xd0, 0x18, 0xcf, 0x62, 0xa2, 0x2e, 0x1e, 0x24, 0x23, 0x78, 0xf0, 0x42, 0x86, 0x7d, 0x91, 0x45,
	0x58, 0xe7, 0x5e, 0xa7, 0xc1, 0x93, 0xff, 0x9a, 0xff, 0x99, 0x69, 0x3b, 0x4c, 0x83, 0x07, 0x4f,
	0x6f, 0xfb, 0x7e, 0x5f, 0xbf, 0xd7, 0x7e, 0xc0, 0xa3, 0x5c, 0xcd, 0x26, 0x84, 0x44, 0xb1, 0x4c,
	0xfc, 0x34, 0x93, 0x4a, 0x72, 0xef, 0xd3, 0xcc, 0xce, 0xf6, 0x02, 0x89, 0xa2, 0x17, 0xb4, 0x72,
	0xef, 0x14, 0x6a, 0x57, 0xb9, 0x9a, 0x8d, 0x09, 0xb3, 0x10, 0xdf, 0xf8, 0x11, 0xd4, 0xcc, 0xd9,
	0x57, 0x5c, 0x4e, 0x62, 0xd1, 0x66, 0x5d, 0xd6, 0x2f, 0x87, 0x55, 0x2d, 0xdd, 0xe3, 0x32, 0x10,
	0xbd, 0x1b, 0xc7, 0x4e, 0xe9, 0x7f, 0x76, 0xbe, 0x0f, 0x9b, 0x39, 0x61, 0xa6, 0x59, 0xa9, 0xcb,
	0xfa, 0x95, 0xd0, 0xd3, 0xbf, 0x81, 0xe8, 0x7d, 0x33, 0xa8, 0x3f, 0x24, 0xf3, 0x38, 0xc1, 0x91,
	0x8a, 0x54, 0x4e, 0xae, 0x93, 0xb9, 0xce, 0xf5, 0x15, 0xa5, 0xf5, 0x15, 0x87, 0x00, 0xc5, 0x43,
	0x35, 0x2e, 0x5b, 0x5c, 0x28, 0x81, 0xe0, 0x07, 0x50, 0x25, 0xcc, 0xde, 0x6d, 0xf2, 0x86, 0x49,
	0xde, 0xb2, 0x42, 0x20, 0xf8, 0x31, 0x34, 0x13, 0x54, 0xf3, 0x78, 0x3a, 0x71, 0x22, 0x2a, 0x26,
	0xa2, 0x61, 0xc1, 0xe8, 0x37, 0x68, 0x17, 0xca, 0x89, 0xfc, 0x68, 0x7b, 0x86, 0xea, 0xcf, 0xb3,
	0x2f, 0x06, 0x3b, 0xe1, 0xf0, 0x5a, 0xf7, 0x51, 0xd8, 0xf8, 0x25, 0xd4, 0x6e, 0x51, 0xad, 0x1a,
	0xe2, 0x2d, 0xdf, 0x96, 0xee, 0x3b, 0x15, 0x77, 0xfe, 0x8a, 0x94, 0xf2, 0x0b, 0xa8, 0x8f, 0x53,
	0x11, 0x29, 0xb4, 0xa5, 0xf0, 0xbd, 0x95, 0xc9, 0x2d, 0xa9, 0xd3, 0x58, 0xa9, 0x8f, 0x32, 0x16,
	0x21, 0xa5, 0x83, 0x13, 0x68, 0x3d, 0xcb, 0x85, 0x9f, 0xe0, 0x34, 0x9f, 0x47, 0xf1, 0xa2, 0xc0,
	0x83, 0xe6, 0xd3, 0x50, 0x4f, 0xe7, 0x66, 0x77, 0xa5, 0x21, 0x9b, 0x7a, 0x86, 0x9e, 0xff, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x0a, 0xb0, 0xc1, 0x12, 0x1f, 0x02, 0x00, 0x00,
}
