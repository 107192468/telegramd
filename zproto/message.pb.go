// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

package zproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MessageDataEmpty struct {
}

func (m *MessageDataEmpty) Reset()                    { *m = MessageDataEmpty{} }
func (m *MessageDataEmpty) String() string            { return proto.CompactTextString(m) }
func (*MessageDataEmpty) ProtoMessage()               {}
func (*MessageDataEmpty) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type MessageData struct {
	MessageType int32 `protobuf:"varint,1,opt,name=message_type,json=messageType" json:"message_type,omitempty"`
}

func (m *MessageData) Reset()                    { *m = MessageData{} }
func (m *MessageData) String() string            { return proto.CompactTextString(m) }
func (*MessageData) ProtoMessage()               {}
func (*MessageData) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *MessageData) GetMessageType() int32 {
	if m != nil {
		return m.MessageType
	}
	return 0
}

type VoidRsp struct {
}

func (m *VoidRsp) Reset()                    { *m = VoidRsp{} }
func (m *VoidRsp) String() string            { return proto.CompactTextString(m) }
func (*VoidRsp) ProtoMessage()               {}
func (*VoidRsp) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func init() {
	proto.RegisterType((*MessageDataEmpty)(nil), "zproto.MessageDataEmpty")
	proto.RegisterType((*MessageData)(nil), "zproto.MessageData")
	proto.RegisterType((*VoidRsp)(nil), "zproto.VoidRsp")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 137 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xab, 0x02, 0xd3, 0x4a, 0x42,
	0x5c, 0x02, 0xbe, 0x10, 0x09, 0x97, 0xc4, 0x92, 0x44, 0xd7, 0xdc, 0x82, 0x92, 0x4a, 0x25, 0x03,
	0x2e, 0x6e, 0x24, 0x31, 0x21, 0x45, 0x2e, 0x1e, 0xa8, 0xde, 0xf8, 0x92, 0xca, 0x82, 0x54, 0x09,
	0x46, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0x6e, 0xa8, 0x58, 0x48, 0x65, 0x41, 0xaa, 0x12, 0x27, 0x17,
	0x7b, 0x58, 0x7e, 0x66, 0x4a, 0x50, 0x71, 0x81, 0x93, 0x06, 0x97, 0x70, 0x72, 0x7e, 0xae, 0x5e,
	0x5e, 0x6a, 0x52, 0x69, 0x4e, 0x62, 0x66, 0xae, 0x1e, 0xc4, 0x1e, 0x27, 0xde, 0xa8, 0x00, 0x10,
	0x0d, 0x35, 0xd7, 0x83, 0x29, 0x80, 0x31, 0x89, 0x0d, 0x2c, 0x63, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0xc6, 0x03, 0xd6, 0x8d, 0x9a, 0x00, 0x00, 0x00,
}
