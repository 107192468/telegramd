<?xml version="1.0" encoding="UTF-8"?>
<table sqlname="messages2">
    <operation name="Insert">
        <sql>
            INSERT INTO messages2
                (user_id, user_message_box_id, dialog_message_id, sender_user_id, message_box_type, peer_type, peer_id, random_id, message_type, message_data, date2)
            VALUES
                (:user_id, :user_message_box_id, :dialog_message_id, :sender_user_id, :message_box_type, :peer_type, :peer_id, :random_id, :message_type, :message_data, :date2)
        </sql>
    </operation>

    <operation name="SelectByMessageIdList" result_set="list">
        <params>
            <param name="idList" type="[]int32" />
        </params>
        <sql>
            SELECT
                user_id, user_message_box_id, sender_user_id, message_box_type, peer_type, peer_id, message_type, message_data, date2
            FROM
                messages2
            WHERE
                user_id = :user_id AND user_message_box_id IN (:idList)  ORDER BY user_message_box_id DESC
        </sql>
    </operation>


    <operation name="SelectByMessageId">
        <sql>
            SELECT
                user_id, user_message_box_id, sender_user_id, message_box_type, peer_type, peer_id, message_type, message_data, date2
            FROM
                messages2
            WHERE
                user_id = :user_id AND user_message_box_id = :user_message_box_id LIMIT 1
        </sql>
    </operation>

    <!-- // Backward -->
    <operation name="SelectBackwardByPeerOffsetLimit" result_set="list">
        <params>
            <param name="limit" type="int32" />
        </params>
        <sql>
            <![CDATA[
            SELECT
                user_id, user_message_box_id, sender_user_id, message_box_type, peer_type, peer_id, message_type, message_data, date2
            FROM
                messages2
            WHERE
                user_id = :user_id AND peer_type = :peer_type AND peer_id = :peer_id AND user_message_box_id < :user_message_box_id
            ORDER BY user_message_box_id DESC LIMIT :limit
            ]]>
        </sql>
    </operation>

    <operation name="SelectBackwardByPeerUserOffsetLimit" result_set="list">
        <params>
            <param name="limit" type="int32" />
        </params>
        <sql>
            <![CDATA[
            SELECT
                user_id, user_message_box_id, sender_user_id, message_box_type, peer_type, peer_id, message_type, message_data, date2
            FROM
                messages2
            WHERE
                user_id = :user_id AND ((sender_user_id = :user_id AND peer_id = :peer_id) OR (sender_user_id = :peer_id AND peer_id = :user_id)) AND peer_type = :peer_type AND user_message_box_id < :user_message_box_id
            ORDER BY user_message_box_id DESC LIMIT :limit
            ]]>
        </sql>
    </operation>

    <!-- // Forward -->
    <operation name="SelectForwardByPeerOffsetLimit" result_set="list">
        <params>
            <param name="limit" type="int32" />
        </params>
        <sql>
            <![CDATA[
            SELECT
                user_id, user_message_box_id, sender_user_id, message_box_type, peer_type, peer_id, message_type, message_data, date2
            FROM
                messages2
            WHERE
                user_id = :user_id AND peer_type = :peer_type AND peer_id = :peer_id AND user_message_box_id >= :user_message_box_id
            ORDER BY user_message_box_id LIMIT :limit
            ]]>
        </sql>
    </operation>


    <operation name="SelectForwardByPeerUserOffsetLimit" result_set="list">
        <params>
            <param name="limit" type="int32" />
        </params>
        <sql>
            <![CDATA[
            SELECT
                user_id, user_message_box_id, sender_user_id, message_box_type, peer_type, peer_id, message_type, message_data, date2
            FROM
                messages2
            WHERE
                user_id = :user_id AND ((sender_user_id = :user_id AND peer_id = :peer_id) OR (sender_user_id = :peer_id AND peer_id = :user_id)) AND peer_type = :peer_type AND user_message_box_id >= :user_message_box_id
            ORDER BY user_message_box_id LIMIT :limit
            ]]>
        </sql>
    </operation>

    <!--
    <operation name="SelectByIdList" result_set="list">
        <params>
            <param name="idList" type="[]int32" />
        </params>
        <sql>
            SELECT
                id, sender_user_id, peer_type, peer_id, random_id, message_type, message_data, date2
            FROM
                messages
            WHERE
                id IN (:idList) ORDER BY id
        </sql>
    </operation>
    <operation name="SelectOrderByIdList" result_set="list">
        <params>
            <param name="idList" type="[]int32" />
        </params>
        <sql>
            SELECT
                id, sender_user_id, peer_type, peer_id, random_id, message_type, message_data, date2
            FROM
                messages
            WHERE
                id IN (:idList) ORDER BY id DESC
        </sql>
    </operation>
    <operation name="SelectByUserIdAndPeerOffsetLimit" result_set="list">
        <params>
            <param name="offset_id" type="int32" />
            <param name="limit" type="int32" />
        </params>
        <sql>
            <![CDATA[
            SELECT
                id, sender_user_id, peer_type, peer_id, random_id, message_type, message_data, date2
            FROM
                messages
            WHERE
                id < :offset_id AND peer_type = :peer_type AND
                ((sender_user_id = :sender_user_id AND peer_id = :peer_id)
                OR (sender_user_id = :peer_id AND peer_id = :sender_user_id)) ORDER BY id DESC LIMIT :limit
            ]]>
        </sql>
    </operation>

    <operation name="SelectChatMessageByOffsetLimit" result_set="list">
        <params>
            <param name="offset_id" type="int32" />
            <param name="limit" type="int32" />
        </params>
        <sql>
            <![CDATA[
            SELECT
                id, sender_user_id, peer_type, peer_id, random_id, message_type, message_data, date2
            FROM
                messages
            WHERE
                id < :offset_id AND peer_type = :peer_type AND sender_user_id = :sender_user_id ORDER BY id DESC LIMIT :limit
            ]]>
        </sql>
    </operation>
    -->
</table>
