<?xml version="1.0" encoding="UTF-8"?>
<table sqlname="message_boxes">
    <operation name="Insert">
        <sql>
            INSERT INTO message_boxes
                (user_id, user_message_box_id, message_id, sender_user_id, message_box_type, peer_type, peer_id, pts, media_unread, date2, created_at)
            VALUES
                (:user_id, :user_message_box_id, :message_id, :sender_user_id, :message_box_type, :peer_type, :peer_id, :pts, :media_unread, :date2, :created_at)
        </sql>
    </operation>

    <operation name="SelectLastPts">
        <sql>
            SELECT pts FROM message_boxes WHERE user_id = :user_id ORDER BY pts DESC LIMIT 1
        </sql>
    </operation>

    <operation name="SelectLastPtsByPeer">
        <sql>
            SELECT
                pts
            FROM
                message_boxes
            WHERE
                user_id = :user_id AND peer_type = :peer_type AND peer_id = :peer_id ORDER BY pts DESC LIMIT 1
        </sql>
    </operation>

    <operation name="SelectPtsByGtMessageID" result_set="list">
        <sql>
            SELECT pts FROM message_boxes WHERE user_id = :user_id AND message_id > :message_id ORDER BY pts
        </sql>
    </operation>

    <!-- // Backward -->
    <operation name="SelectBackwardByPeerOffsetLimit" result_set="list">
        <params>
            <param name="limit" type="int32" />
        </params>
        <sql>
            <![CDATA[
            SELECT
                user_id, user_message_box_id, message_id, sender_user_id, message_box_type, peer_type, peer_id, pts, media_unread, state, date2
            FROM
                message_boxes
            WHERE
                user_id = :user_id AND peer_type = :peer_type AND peer_id = :peer_id AND user_message_box_id < :user_message_box_id
            ORDER BY user_message_box_id DESC LIMIT :limit
            ]]>
        </sql>
    </operation>

    <operation name="SelectBackwardByPeerUserOffsetLimit" result_set="list">
        <params>
            <param name="limit" type="int32" />
        </params>
        <sql>
            <![CDATA[
            SELECT
                user_id, user_message_box_id, message_id, sender_user_id, message_box_type, peer_type, peer_id, pts, media_unread, state, date2
            FROM
                message_boxes
            WHERE
                user_id = :user_id AND ((sender_user_id = :user_id AND peer_id = :peer_id) OR (sender_user_id = :peer_id AND peer_id = :user_id)) AND peer_type = :peer_type AND user_message_box_id < :user_message_box_id
            ORDER BY user_message_box_id DESC LIMIT :limit
            ]]>
        </sql>
    </operation>

    <!-- // Forward -->
    <operation name="SelectForwardByPeerOffsetLimit" result_set="list">
        <params>
            <param name="limit" type="int32" />
        </params>
        <sql>
            <![CDATA[
            SELECT
                user_id, user_message_box_id, message_id, sender_user_id, message_box_type, peer_type, peer_id, pts, media_unread, state, date2
            FROM
                message_boxes
            WHERE
                user_id = :user_id AND peer_type = :peer_type AND peer_id = :peer_id AND user_message_box_id >= :user_message_box_id
            ORDER BY user_message_box_id LIMIT :limit
            ]]>
        </sql>
    </operation>


    <operation name="SelectForwardByPeerUserOffsetLimit" result_set="list">
        <params>
            <param name="limit" type="int32" />
        </params>
        <sql>
            <![CDATA[
            SELECT
                user_id, user_message_box_id, message_id, sender_user_id, message_box_type, peer_type, peer_id, pts, media_unread, state, date2
            FROM
                message_boxes
            WHERE
                user_id = :user_id AND ((sender_user_id = :user_id AND peer_id = :peer_id) OR (sender_user_id = :peer_id AND peer_id = :user_id)) AND peer_type = :peer_type AND user_message_box_id >= :user_message_box_id
            ORDER BY user_message_box_id LIMIT :limit
            ]]>
        </sql>
    </operation>

    <operation name="SelectByGtPts" result_set="list">
        <sql>
            SELECT
                user_id, user_message_box_id, sender_user_id, message_box_type, peer_type, peer_id, pts, message_id, media_unread, state, date2
            FROM
                message_boxes
            WHERE
                user_id = :user_id AND pts > :pts ORDER BY pts
        </sql>
    </operation>

    <operation name="SelectByMessageIdList" result_set="list">
        <params>
            <param name="idList" type="[]int32" />
        </params>
        <sql>
            SELECT
                user_id, user_message_box_id, message_id, sender_user_id, message_box_type, peer_type, peer_id, pts, media_unread, state, date2
            FROM
                message_boxes
            WHERE
                user_id = :user_id AND user_message_box_id IN (:idList)
        </sql>
    </operation>


    <operation name="SelectByUserIdAndMessageBoxId">
        <sql>
            SELECT
                user_id, user_message_box_id, message_id, sender_user_id, message_box_type, peer_type, peer_id, media_unread, date2
            FROM
                message_boxed
            WHERE
                user_id = :user_id AND user_message_box_id = :user_message_box_id LIMIT 1
        </sql>
    </operation>


</table>
